
# test_tempdir.py - Generated by CodiumAI
from tempdir import TempDir
import pytest
import os

"""
Code Analysis:
-The TempDir class is designed to create a temporary directory and change the current working directory to that directory.
- The class takes a new directory path as an argument during initialization.
- The class also stores the current working directory before changing it to the new directory.
- The __enter__ method changes the current working directory to the new directory.
- The __exit__ method changes the current working directory back to the old directory.
- The class is used in a with statement to ensure that the current working directory is changed back to the old directory even if an exception occurs.
- The class uses the os module to change the current working directory.
- The new_dir field stores the path to the new directory.
- The old_dir field stores the path to the old directory before it was changed.
"""

"""
Test Plan:
- test_create_tempdir_valid_path(): tests creating a TempDir object with a valid directory path. Tags: [happy path]
- test_use_tempdir_with_statement(): tests using the TempDir object in a with statement to change the current working directory to the new directory and exiting the with statement to change the current working directory back to the old directory. Tags: [happy path]
- test_create_tempdir_nonexistent_path(): tests creating a TempDir object with a non-existent directory path. Tags: [edge case]
- test_create_tempdir_non_string_path(): tests creating a TempDir object with a directory path that is not a string. Tags: [edge case]
- test_old_dir_field_stores_old_dir(): tests that the old_dir field stores the path to the old directory before it was changed. Tags: [general behavior]
- test_new_dir_field_stores_new_dir(): tests that the new_dir field stores the path to the new directory. Tags: [general behavior]
- test_os_module_behavior(): tests the behavior of the os module when changing the current working directory. Tags: [general behavior]
- test_create_tempdir_not_directory_path(): tests creating a TempDir object with a directory path that is not a directory. Tags: [edge case]
- test_use_tempdir_outside_with_statement(): tests using the TempDir object outside of a with statement. Tags: [edge case]
- test_enter_method_changes_working_dir(): tests that the __enter__ method changes the current working directory to the new directory. Tags: [happy path]
- test_exit_method_changes_working_dir(): tests that the __exit__ method changes the current working directory back to the old directory. Tags: [happy path]
"""



class TestTempDir:
    def test_create_tempdir_valid_path(self):
        with TempDir("test_dir"):
            assert os.getcwd() == os.path.abspath("test_dir")

    def test_use_tempdir_with_statement(self):
        with TempDir("test_dir"):
            assert os.getcwd() == os.path.abspath("test_dir")
        assert os.getcwd() != os.path.abspath("test_dir")

    def test_old_dir_field_stores_old_dir(self):
        old_dir = os.getcwd()
        with TempDir("test_dir"):
            assert TempDir.old_dir == old_dir

    def test_new_dir_field_stores_new_dir(self):
        with TempDir("test_dir"):
            assert TempDir.new_dir == os.path.abspath("test_dir")

    def test_os_module_behavior(self):
        with TempDir("test_dir"):
            assert os.getcwd() == os.path.abspath("test_dir")
        assert os.getcwd() != os.path.abspath("test_dir")

    def test_use_tempdir_outside_with_statement(self):
        tempdir = TempDir("test_dir")
        assert os.getcwd() != os.path.abspath("test_dir")
        tempdir.__enter__()
        assert os.getcwd() == os.path.abspath("test_dir")
        tempdir.__exit__(None, None, None)
        assert os.getcwd() != os.path.abspath("test_dir")

